warning: unreachable statement
   --> src/codegen.rs:686:21
    |
685 |                       return Err(get_error(&["7"]));
    |                       ----------------------------- any code following this expression is unreachable
686 | /                     self.builder.build_return(None)
687 | |                         .map_err(|builder_func| format!("error building function return with no value: {}",builder_func))?;
    | |___________________________________________________________________________________________________________________________^ unreachable statement
    |
    = note: `#[warn(unreachable_code)]` on by default

warning: unreachable expression
   --> src/types.rs:170:5
    |
163 |         return Type::FixedDecimal;
    |         ------------------------- any code following this expression is unreachable
...
170 |     todo!("Make it so all functions don't return just a fixed decimal by default!")
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable expression
    |
    = note: this warning originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: value assigned to `then_block` is never read
   --> src/codegen.rs:261:13
    |
261 |             then_block = self.builder.get_insert_block().unwrap(); 
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: value assigned to `else_block` is never read
   --> src/codegen.rs:274:13
    |
274 |             else_block = self.builder.get_insert_block().unwrap(); 
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `var`
   --> src/codegen.rs:452:29
    |
452 |                         let var = self.builder.build_float_add(lhs_float, rhs_float, "tmpadd").unwrap();
    |                             ^^^ help: if this is intentional, prefix it with an underscore: `_var`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `floatval`
   --> src/codegen.rs:457:29
    |
457 |                         let floatval = self.builder.build_float_sub(lhs_float, rhs_float, "tmpsub");
    |                             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_floatval`

warning: unused variable: `var`
   --> src/codegen.rs:462:29
    |
462 |                         let var = self.builder.build_float_mul(lhs_float, rhs_float, "tmpmul");
    |                             ^^^ help: if this is intentional, prefix it with an underscore: `_var`

warning: unused variable: `var`
   --> src/codegen.rs:468:29
    |
468 |                         let var = self.builder.build_float_div(lhs_float,rhs_float,"tmpdiv");
    |                             ^^^ help: if this is intentional, prefix it with an underscore: `_var`

warning: unused variable: `myblock`
   --> src/codegen.rs:675:21
    |
675 |                 let myblock = dbg.lexical_blocks.borrow_mut().pop();
    |                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_myblock`

warning: unused variable: `name`
  --> src/ast.rs:49:41
   |
49 |             Expr::Variable { ref _type, ref name } => {return *_type},
   |                                         ^^^^^^^^ help: try ignoring the field: `name: _`

warning: unused variable: `value`
  --> src/ast.rs:50:39
   |
50 |             Expr::NumVal { ref _type, ref value } => {return *_type},
   |                                       ^^^^^^^^^ help: try ignoring the field: `value: _`

warning: unused variable: `args`
  --> src/ast.rs:51:37
   |
51 |             Expr::Call { ref _type, ref args, ref fn_name } => {return *_type},
   |                                     ^^^^^^^^ help: try ignoring the field: `args: _`

warning: unused variable: `fn_name`
  --> src/ast.rs:51:47
   |
51 |             Expr::Call { ref _type, ref args, ref fn_name } => {return *_type},
   |                                               ^^^^^^^^^^^ help: try ignoring the field: `fn_name: _`

warning: unused variable: `operator`
  --> src/ast.rs:52:28
   |
52 |             Expr::Binary { ref operator, ref left, ref right } => {
   |                            ^^^^^^^^^^^^ help: try ignoring the field: `operator: _`

warning: unused variable: `variable_name`
  --> src/ast.rs:55:32
   |
55 |             Expr::Assignment { ref variable_name, ref value } => Type::Void,
   |                                ^^^^^^^^^^^^^^^^^ help: try ignoring the field: `variable_name: _`

warning: unused variable: `value`
  --> src/ast.rs:55:51
   |
55 |             Expr::Assignment { ref variable_name, ref value } => Type::Void,
   |                                                   ^^^^^^^^^ help: try ignoring the field: `value: _`

warning: unused variable: `sign_bit_val`
   --> src/types/fixed_decimal.rs:145:13
    |
145 |         let sign_bit_val = sign_bit.const_to_int(self.context.bool_type());
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sign_bit_val`

warning: unused variable: `before_arr`
   --> src/types/fixed_decimal.rs:150:13
    |
150 |         let before_arr = self.builder.build_load(before_ptr, "load_before_arr").unwrap().into_array_value();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_before_arr`

warning: unused variable: `value`
   --> src/types.rs:118:33
    |
118 |     fn gen_float_decimal(&self, value: f64) -> FloatValue<'ctx>
    |                                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `other`
   --> src/types.rs:281:13
    |
281 |             other =>
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_other`

warning: variable does not need to be mutable
  --> src/passes.rs:71:17
   |
71 |             let mut statement_clone = i.clone();
   |                 ----^^^^^^^^^^^^^^^
   |                 |
   |                 help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused `Result` that must be used
   --> src/codegen.rs:260:13
    |
260 |             self.builder.build_unconditional_branch(if_cont_block);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
    |
260 |             let _ = self.builder.build_unconditional_branch(if_cont_block);
    |             +++++++

warning: unused `Result` that must be used
   --> src/codegen.rs:273:13
    |
273 |             self.builder.build_unconditional_branch(if_cont_block);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
273 |             let _ = self.builder.build_unconditional_branch(if_cont_block);
    |             +++++++

warning: unused `Result` that must be used
  --> src/debugger.rs:45:5
   |
45 |     dibuilder.create_basic_type("double", 64, 0 , 0);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
   |
45 |     let _ = dibuilder.create_basic_type("double", 64, 0 , 0);
   |     +++++++

warning: `plick` (bin "plick" test) generated 24 warnings (run `cargo fix --bin "plick" --tests` to apply 17 suggestions)
    Finished test [unoptimized + debuginfo] target(s) in 0.01s
     Running unittests src/main.rs (target/debug/deps/plick-f468caa88d918a5a)
Use of instruction is not an instruction!
  %get_sign_bit = getelementptr inbounds { i1, [16 x i8], [15 x i8] }, { i1, [16 x i8], [15 x i8] }* %tmpalloca, i32 0, i32 0, !dbg !6
Use of instruction is not an instruction!
  %load_digit = getelementptr [16 x i8], [16 x i8]* %get_before, i8 0, !dbg !6
Use of instruction is not an instruction!
  %load_digit1 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 1, !dbg !6
Use of instruction is not an instruction!
  %load_digit2 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 2, !dbg !6
Use of instruction is not an instruction!
  %load_digit3 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 3, !dbg !6
Use of instruction is not an instruction!
  %load_digit4 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 4, !dbg !6
Use of instruction is not an instruction!
  %load_digit5 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 5, !dbg !6
Use of instruction is not an instruction!
  %load_digit6 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 6, !dbg !6
Use of instruction is not an instruction!
  %load_digit7 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 7, !dbg !6
Use of instruction is not an instruction!
  %load_digit8 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 8, !dbg !6
Use of instruction is not an instruction!
  %load_digit9 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 9, !dbg !6
Use of instruction is not an instruction!
  %load_digit10 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 10, !dbg !6
Use of instruction is not an instruction!
  %load_digit11 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 11, !dbg !6
Use of instruction is not an instruction!
  %load_digit12 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 12, !dbg !6
Use of instruction is not an instruction!
  %load_digit13 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 13, !dbg !6
Use of instruction is not an instruction!
  %load_digit14 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 14, !dbg !6
Use of instruction is not an instruction!
  %load_digit15 = getelementptr [16 x i8], [16 x i8]* %get_before, i8 15, !dbg !6
Use of instruction is not an instruction!
  %get_sign_bit17 = getelementptr inbounds { i1, [16 x i8], [15 x i8] }, { i1, [16 x i8], [15 x i8] }* %tmpalloca16, i32 0, i32 0, !dbg !6
Use of instruction is not an instruction!
  %load_digit20 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 0, !dbg !6
Use of instruction is not an instruction!
  %load_digit21 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 1, !dbg !6
Use of instruction is not an instruction!
  %load_digit22 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 2, !dbg !6
Use of instruction is not an instruction!
  %load_digit23 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 3, !dbg !6
Use of instruction is not an instruction!
  %load_digit24 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 4, !dbg !6
Use of instruction is not an instruction!
  %load_digit25 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 5, !dbg !6
Use of instruction is not an instruction!
  %load_digit26 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 6, !dbg !6
Use of instruction is not an instruction!
  %load_digit27 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 7, !dbg !6
Use of instruction is not an instruction!
  %load_digit28 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 8, !dbg !6
Use of instruction is not an instruction!
  %load_digit29 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 9, !dbg !6
Use of instruction is not an instruction!
  %load_digit30 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 10, !dbg !6
Use of instruction is not an instruction!
  %load_digit31 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 11, !dbg !6
Use of instruction is not an instruction!
  %load_digit32 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 12, !dbg !6
Use of instruction is not an instruction!
  %load_digit33 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 13, !dbg !6
Use of instruction is not an instruction!
  %load_digit34 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 14, !dbg !6
Use of instruction is not an instruction!
  %load_digit35 = getelementptr [16 x i8], [16 x i8]* %get_before18, i8 15, !dbg !6
error: test failed, to rerun pass `--bin plick`
